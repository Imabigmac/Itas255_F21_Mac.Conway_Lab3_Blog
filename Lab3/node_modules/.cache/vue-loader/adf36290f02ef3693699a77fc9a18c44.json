{"remainingRequest":"C:\\Users\\Mac\\Documents\\BlogDocker\\Lab3\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Mac\\Documents\\BlogDocker\\Lab3\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Mac\\Documents\\BlogDocker\\Lab3\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Mac\\Documents\\BlogDocker\\Lab3\\src\\views\\Post.vue?vue&type=template&id=66b2084c&","dependencies":[{"path":"C:\\Users\\Mac\\Documents\\BlogDocker\\Lab3\\src\\views\\Post.vue","mtime":1638995450982},{"path":"C:\\Users\\Mac\\Documents\\BlogDocker\\Lab3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638389449386},{"path":"C:\\Users\\Mac\\Documents\\BlogDocker\\Lab3\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1638389452989},{"path":"C:\\Users\\Mac\\Documents\\BlogDocker\\Lab3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1638389449386},{"path":"C:\\Users\\Mac\\Documents\\BlogDocker\\Lab3\\node_modules\\vue-loader\\lib\\index.js","mtime":1638389451236}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}